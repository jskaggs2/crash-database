install.packages("jsonlite", type = "source")
devtools::install_github("swarm-lab/ROpenCVLite")
install.packages("ROpenCVLite")
library(ROpenCVLite)
library(ROpenCVLite)
library(ROpenCVLite)
library(Rvision)
devtools::install_github("swarm-lab/Rvision")
library(Rvision)
# Load example video
path_to_video <- system.file("sample_vid", "Balloon.mp4", package = "Rvision")
my_video <- video(filename = path_to_video)
# Remove video from memory
release(my_video)
library(RCurl)
getwd()
setwd("C:/veh")
setwd("C:/veh/scripts")
getURL(parent , dirlistonly=T )
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES"
getURL(parent , dirlistonly=T )
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES"
getURL(parent, dirlistonly=TRUE)
update.packges("RCurl")
update.packages("RCurl")
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES"
getURL(parent, dirlistonly=TRUE)
ge <- sprintf("wget -r -np -l 1 -A zip %s", url)
ge <- sprintf("wget -r -np -l 1 -A zip %s", parent)
ge
system(ge)
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES"
getURL(parent, dirlistonly=TRUE)
ge <- sprintf("wget -r -np -l 1 -A zip %s", parent)
system(ge)
wd()
system("c:")
getwd()
ge <- sprintf("wget -r -np -l 1 -A zip %s", parent)
system(ge)
ge <- sprintf("wget -r -np -l 2 -A zip %s", parent)
system(ge)
ge <- sprintf("wget -r -np -l 0 -A zip %s", parent)
system(ge)
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES00"
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES00"
ge <- sprintf("wget -r -np -l 0 -A zip %s", parent)
system(ge)
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES00"
ge <- sprintf("wget -r -np -nH --cut-dirs=3 -R index.html %s", parent)
system(ge)
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES/GES00/"
ge <- sprintf("wget -r -np -nH --cut-dirs=3 -R index.html %s", parent)
system(ge)
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES/GES00/"
ge <- sprintf("wget -r -np -nH %s", parent)
system(ge)
parent
## GES
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES/GES00/"
ge <- sprintf("wget -r -np -nH -A zip %s", parent)
system(ge)
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES/GES00/"
ge <- sprintf("wget -r -np -nH -erobots=off -A zip %s", parent)
system(ge)
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES/GES00/"
ge <- sprintf("wget -r -l1 -H -t1 -nd -N -np -A.mp3 -erobots=off %s", parent)
system(ge)
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES/GES00/"
ge <- sprintf("wget -r -l1 -H -t1 -nd -N -np -A.zip -erobots=off %s", parent)
system(ge)
## GES
parent <- "https://www.nhtsa.gov/file-downloads?p=nhtsa/downloads/GES/GES00/"
ge <- sprintf("wget -r -l1 -H -t1 -N -np -A.zip -erobots=off %s", parent)
system(ge)
list.files(path = "../data/FARS", recusive = TRUE)
list.files(path = "../data/FARS", recursive = TRUE)
list.files(path = "../data/FARS", recursive = TRUE, pattern = ".csv")
length <- list.files(path = "../data/FARS", recursive = TRUE, pattern = ".csv")
length(list.files(path = "../data/FARS", recursive = TRUE, pattern = ".csv"))
# Define a working folder for data conversion.
path <- file.path("C:", "Garmin", "FromGarmin")
# Define a working folder for data conversion.
path <- file.path("C:", "Garmin", "FromGarmin")
# The Lance Lab has two GPS units. Specify which one you are downloading data
# from here (GPS1 or GPS2).
gps_id <- "GPS2"
# Plug in the GPS device. Then specify its drive letter below.
gps_letter <- "F"
# Check to see if `path` exists; if it doesn't, create it.
if(!(dir.exists(path))){
dir.create(path)
}
# Create a file directory in `path`. Folder name should be today's date using
# YYYY-MM-DD.
infolder <- file.path(path, Sys.Date(), gps_id)
if(!(file.exists(infolder))){
dir.create(infolder, recursive = TRUE)
}
# Define a path to the GPS GPX files.
d <- paste0(gps_letter, ":")
path_gpx <- file.path(d, "Garmin", "GPX")
path_gpx
# Define a path to the GPS photo files.
path_dcim <- file.path(d, "DCIM")
if(length(list.files(infolder)) == 0){
# Save a copy of the original data to your working folder.
file.copy(from = path_gpx, to = infolder, recursive = TRUE)
file.copy(from = path_dcim, to = infolder, recursive = TRUE)
}else{
print(infolder)
stop("Files already exist in the target destination folder.")
}
# Get list of data files to convert
infiles <- list.files(path = paste0(infolder, "/GPX"), pattern = ".gpx", full.names = TRUE)
infiles
# GPX can contain multiple layers; extract all layers with > 0 features.
# Loop over each input GPX.
for (gpx in infiles){
# Use regex to extract an input GPX file name.
gpx_name <- sub(pattern = ".*/", replacement = "", x = gpx)
# Get metadata that describes multiple layers within a single GPX.
layers <- sf::st_layers(gpx)
# Only keep layers with more than one feature.
layerskeep <- which(layers[["features"]] > 0)
# Loop over each layer within each GPX that meet our condition.
for (layer in layerskeep){
# Get name of target layer.
layername <- layers[["name"]][layer]
# Read layer of interest.
gpxlayer <- sf::st_read(gpx, layer = layername)
# Define output file name.
outfile <- paste0(infolder, "/", gpx_name, "_", layername, ".csv")
# Write csv and retain X and Y coordinates as numeric fields.
st_write(gpxlayer, outfile, layer_options = "GEOMETRY=AS_XY")
}
}
library(sf)
# Get list of data files to convert
.
# Get list of data files to convert
infiles <- list.files(path = paste0(infolder, "/GPX"), pattern = ".gpx", full.names = TRUE)
# GPX can contain multiple layers; extract all layers with > 0 features.
# Loop over each input GPX.
for (gpx in infiles){
# Use regex to extract an input GPX file name.
gpx_name <- sub(pattern = ".*/", replacement = "", x = gpx)
# Get metadata that describes multiple layers within a single GPX.
layers <- sf::st_layers(gpx)
# Only keep layers with more than one feature.
layerskeep <- which(layers[["features"]] > 0)
# Loop over each layer within each GPX that meet our condition.
for (layer in layerskeep){
# Get name of target layer.
layername <- layers[["name"]][layer]
# Read layer of interest.
gpxlayer <- sf::st_read(gpx, layer = layername)
# Define output file name.
outfile <- paste0(infolder, "/", gpx_name, "_", layername, ".csv")
# Write csv and retain X and Y coordinates as numeric fields.
st_write(gpxlayer, outfile, layer_options = "GEOMETRY=AS_XY")
}
}
gpx <- "C:/Garmin/FromGarmin/2021-08-13/GPS2/GPX/Current/Current.gpx"
st_layers(gpx)
st_read(gpx, layer = "track_points")
pts <- st_read(gpx, layer = "track_points")
st_write(pts, "C:/Garmin/FromGarmin/2021-08-13/GPS2/current.csv", layer_options = "GEOMETRY=AS_XY")
plot(points$geometry)
plot(points$geometry)
plot(pts$geometry)
files <- list.files(path = "../data/FARS", recursive = TRUE, pattern = ".csv")
files <- list.files(path = "../data/FARS", recursive = TRUE, pattern = ".csv")
files
files <- list.files(path = "../data/FARS", recursive = TRUE, pattern = "ACCIDENT*.csv")
files
files <- list.files(path = "../data/FARS", recursive = TRUE, pattern = "ACCIDENT*")
files
length(files)
1975-2019
sort(files)
files <- list.files(path = "../data/FARS", recursive = TRUE, pattern = "accident*")
files
files <- c(list.files(path = "../data/FARS", recursive = TRUE, pattern = "accident*.csv"),
list.files(path = "../data/FARS", recursive = TRUE, pattern = "ACCIDENT*.csv"))
files
files <- c(list.files(path = "../data/FARS", recursive = TRUE, pattern = "accident*.csv"),
list.files(path = "../data/FARS", recursive = TRUE, pattern = "ACCIDENT*.csv"))
files
files <- c(list.files(path = "../data/FARS", recursive = TRUE, pattern = "accident"),
list.files(path = "../data/FARS", recursive = TRUE, pattern = "ACCIDENT"))
files
fars <- data.frame()
library(dplyr)
file <- files[1]
file
getwd()
files <- c(list.files(path = "../data/FARS", pattern = "accident", recursive = TRUE, full.names = TRUE),
list.files(path = "../data/FARS", pattern = "ACCIDENT", recursive = TRUE, full.names = TRUE))
